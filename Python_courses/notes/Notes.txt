notes du langage: 

ranked website: https://www.hackerrank.com/domains/python

Data Structure	Ordered	Mutable	Constructor	Example
List		Yes	Yes	[ ] or list()	[5.7, 4, 'yes', 5.7]
Tuple		Yes	No	( ) or tuple()	(5.7, 4, 'yes', 5.7)
Set		No	Yes	{}* or set()	{5.7, 4, 'yes'}
Dictionary	No	No**	{ } or dict()	{'Jun': 75, 'Jul': 89}

* You can use curly braces to define a set like this: {1, 2, 3}. However, 
if you leave the curly braces empty like this: {} Python will instead create an empty dictionary. 
So to create an empty set, use set()(for set: discard better than remove for inexistant item no error raised)
*) A dictionary itself is mutable, but each of its individual keys must be immutable.
*) use of Enumerate,zip().
**) 
- duplicate_list = orig_list (point to the same adress (id)). duplicate_list = orig_list[:], or list(orig_list),orig_list.copy()
- pass an empty list as function param => def fct(list[:]) -> def fct(list=None)
to flaten a list of list => sum my list with an empty list
***Comprehensive list: 
[f(x) if condition else g(x) for x in sequence]
[f(x) for x in sequence if condition](we can use else with for loop and break)
Iv*) 
- for key in dictionary - Iterates over each key in the dictionary
- for key, value in dictionary.items() - Iterates over each key,value pair in the dictionary
- dict.keys() - Returns a sequence containing the keys in the dictionary 
- dict.get(key,'error msg') better than dict[key]
- dict.values() - Returns a sequence containing the values in the dictionary
- use defaultdict()(from collections) for non existing keys to process and OrderDict() to order dictionaries.
- 
v) create a list for key dictionary:
 user_groups[user]=[key]
if all(re.search(error_pattern,log.lower()) for i in range(xxxx)): check all are True... multiple true check
vI) use generators instead of iterators.
VII) any/all [list comprehension]: check for True...
VIII) (is) for memory adress , and (==) for values.
 use filter with join to filter 'None' values.

-------------------------- Debugging:
*) Slowness: i/o-bounding (thread,task,process), cpu-bounding (calcul: process parallel)

*) for crashes:
(c/c++): 1- generate a core file: ulimit -c unlimited (core file with unlimited size).2-exec de script code 3- gdg -c core script_file (read de core file) 4- use of: (gdb) backtrace 5- use of (gdb) up, or list or print param
(Python):1- pdb3 scritp.py 2-use of: (pdb) next (line by line) Or (pdb) continue (until pb line) 3- print(param)

*) Memory Leaks: memory not released and optimize
(c/c++) - use a memory profiler:valgrind
(python) - use of; 
for object: import sys, sys.getsizeof(xyz)
for function or method: python -m memory_profiler script.py (put '@profile' decorator before the function)
for application: use of top (linux) or install guppy: from guppy import hpy, h=hpy(),print h.heap()
============================ Puppet: ==============================================
Using general modules (/usr/share/puppet/modules.available/)in manifest files (.pp):
*) invoke in our .pp file: include ::module_name
setting in master section autosign: sudo puppet config --section master set autosign true
setting the server in the node(to which we sshed): sudo puppet config set server ubuntu.example.com
sudo puppet agent -v --test (testing connection to the master: run puppet client manually)
setting node definition: in manifest file site.pp stored at the root of the nodes prod environment; 
(/etc/puppet/code/environments/production/manifests/)
for tests: use: puppet parser validate (for syntax),r-spec tests, use canary environment.
adding new modules, think to add them to site.pp

